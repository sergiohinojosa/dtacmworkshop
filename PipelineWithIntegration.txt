pipeline{
    agent {
        label 'jenkins-slave'
    }
    parameters {
        choice(name: 'BUILD', choices: ['One', 'Two'], description: 'Choose Build')
    }

    stages{
        stage('Checkout code'){
            steps{
                echo 'Checking out microk8s branch'
                sh 'git clone https://github.com/sergiohinojosa/dtacmworkshop.git --branch feature/microk8s --single-branch branch'
                sh 'mv branch/* . ; rm -rf branch'
            }
        }
        stage('Build Code') {
            steps{
                container('mvn'){
                    echo 'Code Building...'
                    script {
                        echo 'Simulate compilation with maven mvn -v'
						sh 'mvn -v'
                    } 
                }
            }
        }
        stage('Build Docker Image'){
            steps{
                container('docker'){
                    echo 'Image Building...'
                    script{
                        sh 'docker -v'
                    }
                }
            }
        }
        stage('Push Image to Registry'){
            steps{
                container('docker'){
                    echo 'Pushing Docker Image to registry...'
                    script{
                        sh 'docker -v'
                    }
                }
            }
        }
        stage('Deploy to Staging'){
            steps{
                container('kubectl'){
                    echo 'Deployment canary build...'
                    createDynatraceDeploymentEvent(envId: 'Dynatrace Server', 
                                                    tagMatchRules: [[meTypes: [[meType: 'SERVICE']], 
                                                    tags: [[context: 'KUBERNETES', key: 'app', value: 'carts'], 
                                                            [context: 'KUBERNETES', key: 'stage', value: 'dev']]]]) {
                        script{
                            if (params.BUILD == "One") {
                                sh 'ls $WORKSPACE'
                                sh 'kubectl apply -f $WORKSPACE/manifests/sockshop-app/dev/carts2.yml'
                                echo "Waiting for carts service to start..."
                                sleep 20
                            } else {
                                sh 'ls $WORKSPACE'
                                sh 'kubectl apply -f $WORKSPACE/manifests/sockshop-app/canary/carts2-canary.yml'
                                echo "Waiting for carts service to start..."
                                sleep 20
                            }
                        }
                    }
                }
            }
        }
        stage ('Run Load Test'){
            steps{
                container('kubectl'){
                    echo 'Get Carts URL'
                    script{
                        dir("loadtest"){
                            sh "chmod +x cartstest.sh"
                            sh "./cartstest.sh"
                            
                        }
                    }
                }
                container('jmeter'){
                    script{
                        recordDynatraceSession(envId: 'Dynatrace Server', tagMatchRules: [[meTypes: [[meType: 'SERVICE']], tags: [[context: 'KUBERNETES', key: 'app', value: 'carts'], [context: 'KUBERNETES', key: 'stage', value: 'dev']]]], testCase: 'loadtest') {
                            if (params.BUILD == "One"){
                                dir("loadtest"){
                                    sh "jmeter -n -t carts_load1.jmx -l testresults.jtl"
                                }   
                            } else {
                                dir("loadtest"){
                                    sh "jmeter -n -t carts_load2.jmx -l testresults.jtl"
                                } 
                            }

                        }
                    }
                }
            }
        }
        stage ('Dynatrace Quality Gate'){
            steps{
              perfSigDynatraceReports envId: 'Dynatrace Server', nonFunctionalFailure: 2, specFile: 'monspec.json'  
            }
        }
        stage ('Deploy to Production'){
            steps{
                container('kubectl'){
                    echo 'Deploying to Production'
                    createDynatraceDeploymentEvent(envId: 'Dynatrace Server', 
                                tagMatchRules: [[meTypes: [[meType: 'SERVICE']], 
                                tags: [[context: 'KUBERNETES', key: 'app', value: 'carts'], 
                                        [context: 'KUBERNETES', key: 'stage', value: 'prod']]]]) {
                        script{
                            if (params.BUILD == "One") {
                                sh 'ls $WORKSPACE'
                                sh 'kubectl apply -f $WORKSPACE/manifests/sockshop-app/production/carts2.yml'
                                echo "Waiting for carts service to start..."
                                sleep 20
                            } else {
                                sh 'ls $WORKSPACE'
                                sh 'kubectl apply -f $WORKSPACE/manifests/sockshop-app/canary/carts2-badbuild.yml'
                                echo "Waiting for carts service to start..."
                                sleep 20
                            }
                        }
                                        }
                }
            }
        }
    }
}